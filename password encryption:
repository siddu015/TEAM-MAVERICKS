from cryptography.fernet import Fernet

# Generate a new encryption key
def generate_key():
    key = Fernet.generate_key()
    with open('encryption_key.key', 'wb') as key_file:
        key_file.write(key)

# Load the encryption key from file
def load_key():
    with open('encryption_key.key', 'rb') as key_file:
        key = key_file.read()
    return key

# Encrypt data using the encryption key
def encrypt_data(data, key):
    fernet = Fernet(key)
    encrypted_data = fernet.encrypt(data.encode())
    return encrypted_data

# Decrypt data using the encryption key
def decrypt_data(encrypted_data, key):
    fernet = Fernet(key)
    decrypted_data = fernet.decrypt(encrypted_data).decode()
    return decrypted_data

# Example usage
def main():
    # Generate or load the encryption key
    # Generate the key only once and keep it secure
    # Load the key for subsequent runs
    try:
        key = load_key()
    except FileNotFoundError:
        generate_key()
        key = load_key()

    # Example data to encrypt
    original_data = "Sensitive information"

    # Encrypt the data
    encrypted_data = encrypt_data(original_data, key)
    print("Encrypted data:", encrypted_data)

    # Decrypt the data
    decrypted_data = decrypt_data(encrypted_data, key)
    print("Decrypted data:", decrypted_data)

if __name__ == "__main__":
    main()
